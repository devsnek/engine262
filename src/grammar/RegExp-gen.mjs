// Generated automatically by nearley, version 2.16.0
// http://github.com/Hardmath123/nearley
function id(x) { return x[0]; }
let Lexer = undefined;
let ParserRules = [
    {"name": "Pattern", "symbols": ["Disjunction"]},
    {"name": "Disjunction", "symbols": ["Alternative"]},
    {"name": "Disjunction", "symbols": ["Alternative", {"literal":"|"}, "Disjunction"]},
    {"name": "Alternative", "symbols": []},
    {"name": "Alternative", "symbols": ["Alternative", "Term"]},
    {"name": "Term", "symbols": ["Assertion"]},
    {"name": "Term", "symbols": ["Atom"]},
    {"name": "Term", "symbols": ["Atom", "Quantifier"]},
    {"name": "Assertion", "symbols": [{"literal":"^"}]},
    {"name": "Assertion", "symbols": [{"literal":"$"}]},
    {"name": "Assertion$string$1", "symbols": [{"literal":"\\"}, {"literal":"b"}], "postprocess": function joiner(d) {return d.join('');}},
    {"name": "Assertion", "symbols": ["Assertion$string$1"]},
    {"name": "Assertion$string$2", "symbols": [{"literal":"\\"}, {"literal":"B"}], "postprocess": function joiner(d) {return d.join('');}},
    {"name": "Assertion", "symbols": ["Assertion$string$2"]},
    {"name": "Assertion$string$3", "symbols": [{"literal":"("}, {"literal":"?"}, {"literal":"="}], "postprocess": function joiner(d) {return d.join('');}},
    {"name": "Assertion", "symbols": ["Assertion$string$3", "Disjunction", {"literal":")"}]},
    {"name": "Assertion$string$4", "symbols": [{"literal":"("}, {"literal":"?"}, {"literal":"!"}], "postprocess": function joiner(d) {return d.join('');}},
    {"name": "Assertion", "symbols": ["Assertion$string$4", "Disjunction", {"literal":")"}]},
    {"name": "Assertion$string$5", "symbols": [{"literal":"("}, {"literal":"?"}, {"literal":"<"}, {"literal":"="}], "postprocess": function joiner(d) {return d.join('');}},
    {"name": "Assertion", "symbols": ["Assertion$string$5", "Disjunction", {"literal":")"}]},
    {"name": "Assertion$string$6", "symbols": [{"literal":"("}, {"literal":"?"}, {"literal":"<"}, {"literal":"!"}], "postprocess": function joiner(d) {return d.join('');}},
    {"name": "Assertion", "symbols": ["Assertion$string$6", "Disjunction", {"literal":")"}]},
    {"name": "Quantifier", "symbols": ["QuantifierPrefix"]},
    {"name": "Quantifier", "symbols": ["QuantifierPrefix", {"literal":"?"}]},
    {"name": "QuantifierPrefix", "symbols": [{"literal":"*"}]},
    {"name": "QuantifierPrefix", "symbols": [{"literal":"+"}]},
    {"name": "QuantifierPrefix", "symbols": [{"literal":"?"}]},
    {"name": "QuantifierPrefix", "symbols": [{"literal":"{"}, "DecimalDigits", {"literal":"}"}]},
    {"name": "QuantifierPrefix$string$1", "symbols": [{"literal":","}, {"literal":"}"}], "postprocess": function joiner(d) {return d.join('');}},
    {"name": "QuantifierPrefix", "symbols": [{"literal":"{"}, "DecimalDigits", "QuantifierPrefix$string$1"]},
    {"name": "QuantifierPrefix", "symbols": [{"literal":"{"}, "DecimalDigits", {"literal":","}, "DecimalDigits", {"literal":"}"}]},
    {"name": "Atom", "symbols": ["PatternCharacter"]},
    {"name": "Atom", "symbols": [{"literal":"."}]},
    {"name": "Atom", "symbols": [{"literal":"\\"}, "AtomEscape"]},
    {"name": "Atom", "symbols": ["CharacterClass"]},
    {"name": "Atom", "symbols": [{"literal":"("}, "GroupSpecifier", "Disjunction", {"literal":")"}]},
    {"name": "Atom$string$1", "symbols": [{"literal":"("}, {"literal":"?"}, {"literal":":"}], "postprocess": function joiner(d) {return d.join('');}},
    {"name": "Atom", "symbols": ["Atom$string$1", "Disjunction", {"literal":")"}]},
    {"name": "SyntaxCharacter", "symbols": [/[$^\\.*+?()[\]{}|]/]},
    {"name": "PatternCharacter", "symbols": [/[^$^\\.*+?()[\]{}|]/]},
    {"name": "AtomEscape", "symbols": ["DecimalEscape"]},
    {"name": "AtomEscape", "symbols": ["CharacterClassEscape"]},
    {"name": "AtomEscape", "symbols": ["CharacterEscape"]},
    {"name": "AtomEscape", "symbols": [{"literal":"k"}, "GroupName"]},
    {"name": "CharacterEscape", "symbols": ["ControlEscape"]},
    {"name": "CharacterEscape", "symbols": [{"literal":"c"}, "ControlLetter"]},
    {"name": "CharacterEscape", "symbols": [{"literal":"0"}]},
    {"name": "CharacterEscape", "symbols": ["HexEscapeSequence"]},
    {"name": "CharacterEscape", "symbols": ["RegExpUnicodeEscapeSequence"]},
    {"name": "CharacterEscape", "symbols": ["IdentityEscape"]},
    {"name": "ControlEscape", "symbols": [/[fnrtv]/]},
    {"name": "ControlLetter", "symbols": [/[abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ]/]},
    {"name": "GroupSpecifier", "symbols": []},
    {"name": "GroupSpecifier", "symbols": [{"literal":"?"}, "GroupName"]},
    {"name": "GroupName", "symbols": [{"literal":"<"}, "RegExpIdentifierName", {"literal":">"}]},
    {"name": "RegExpIdentifierName", "symbols": ["RegExpIdentifierStart"]},
    {"name": "RegExpIdentifierName", "symbols": ["RegExpIdentifierName", "RegExpIdentifierPart"]},
    {"name": "RegExpIdentifierStart", "symbols": [/[a-zA-Z]/]},
    {"name": "RegExpIdentifierStart", "symbols": [{"literal":"$"}]},
    {"name": "RegExpIdentifierStart", "symbols": [{"literal":"_"}, {"literal":"\\"}, "RegExpUnicodeEscapeSequence"]},
    {"name": "RegExpIdentifierPart", "symbols": [/[a-zA-Z0-9]/]},
    {"name": "RegExpIdentifierPart", "symbols": [{"literal":"$"}]},
    {"name": "RegExpIdentifierPart", "symbols": [{"literal":"\\"}, "RegExpUnicodeEscapeSequence"]},
    {"name": "RegExpIdentifierPart", "symbols": [/[\u200C]/]},
    {"name": "RegExpIdentifierPart", "symbols": [/[\u200D]/]},
    {"name": "RegExpUnicodeEscapeSequence$string$1", "symbols": [{"literal":"\\"}, {"literal":"u"}], "postprocess": function joiner(d) {return d.join('');}},
    {"name": "RegExpUnicodeEscapeSequence", "symbols": [{"literal":"u"}, "LeadSurrogate", "RegExpUnicodeEscapeSequence$string$1", "TrailSurrogate"]},
    {"name": "RegExpUnicodeEscapeSequence", "symbols": [{"literal":"u"}, "LeadSurrogate"]},
    {"name": "RegExpUnicodeEscapeSequence", "symbols": [{"literal":"u"}, "TrailSurrogate"]},
    {"name": "RegExpUnicodeEscapeSequence", "symbols": [{"literal":"u"}, "NonSurrogate"]},
    {"name": "RegExpUnicodeEscapeSequence", "symbols": [{"literal":"u"}, "Hex4Digits"]},
    {"name": "RegExpUnicodeEscapeSequence$string$2", "symbols": [{"literal":"u"}, {"literal":"{"}], "postprocess": function joiner(d) {return d.join('');}},
    {"name": "RegExpUnicodeEscapeSequence", "symbols": ["RegExpUnicodeEscapeSequence$string$2", "CodePoint", {"literal":"}"}]},
    {"name": "LeadSurrogate", "symbols": ["Hex4Digits"]},
    {"name": "TrailSurrogate", "symbols": ["Hex4Digits"]},
    {"name": "NonSurrogate", "symbols": ["Hex4Digits"]},
    {"name": "IdentityEscape", "symbols": ["SyntaxCharacter"]},
    {"name": "IdentityEscape", "symbols": [{"literal":"/"}]},
    {"name": "IdentityEscape", "symbols": [/./]},
    {"name": "DecimalEscape", "symbols": ["NonZeroDigit", "DecimalDigits"]},
    {"name": "CharacterClassEscape", "symbols": [{"literal":"d"}]},
    {"name": "CharacterClassEscape", "symbols": [{"literal":"D"}]},
    {"name": "CharacterClassEscape", "symbols": [{"literal":"s"}]},
    {"name": "CharacterClassEscape", "symbols": [{"literal":"S"}]},
    {"name": "CharacterClassEscape", "symbols": [{"literal":"w"}]},
    {"name": "CharacterClassEscape", "symbols": [{"literal":"W"}]},
    {"name": "CharacterClassEscape$string$1", "symbols": [{"literal":"p"}, {"literal":"{"}], "postprocess": function joiner(d) {return d.join('');}},
    {"name": "CharacterClassEscape", "symbols": ["CharacterClassEscape$string$1", "UnicodePropertyValueExpression", {"literal":"}"}]},
    {"name": "CharacterClassEscape$string$2", "symbols": [{"literal":"P"}, {"literal":"{"}], "postprocess": function joiner(d) {return d.join('');}},
    {"name": "CharacterClassEscape", "symbols": ["CharacterClassEscape$string$2", "UnicodePropertyValueExpression", {"literal":"}"}]},
    {"name": "UnicodePropertyValueExpression", "symbols": ["UnicodePropertyName", {"literal":"="}, "UnicodePropertyValue", "LoneUnicodePropertyNameOrValue"]},
    {"name": "UnicodePropertyName", "symbols": ["UnicodePropertyNameCharacters"]},
    {"name": "UnicodePropertyNameCharacters", "symbols": ["UnicodePropertyNameCharacter", "UnicodePropertyNameCharacters"]},
    {"name": "UnicodePropertyValue", "symbols": ["UnicodePropertyValueCharacters"]},
    {"name": "LoneUnicodePropertyNameOrValue", "symbols": ["UnicodePropertyValueCharacters"]},
    {"name": "UnicodePropertyValueCharacters", "symbols": ["UnicodePropertyValueCharacter", "UnicodePropertyValueCharacters"]},
    {"name": "UnicodePropertyValueCharacter", "symbols": ["UnicodePropertyNameCharacter"]},
    {"name": "UnicodePropertyValueCharacter", "symbols": [/[0-9]/]},
    {"name": "UnicodePropertyNameCharacter", "symbols": ["ControlLetter"]},
    {"name": "UnicodePropertyNameCharacter", "symbols": [{"literal":"_"}]},
    {"name": "CharacterClass", "symbols": [{"literal":"["}, "ClassRanges", {"literal":"]"}]},
    {"name": "CharacterClass$string$1", "symbols": [{"literal":"["}, {"literal":"^"}], "postprocess": function joiner(d) {return d.join('');}},
    {"name": "CharacterClass", "symbols": ["CharacterClass$string$1", "ClassRanges", {"literal":"]"}]},
    {"name": "ClassRanges", "symbols": []},
    {"name": "ClassRanges", "symbols": ["NonemptyClassRanges"]},
    {"name": "NonemptyClassRanges", "symbols": ["ClassAtom"]},
    {"name": "NonemptyClassRanges", "symbols": ["ClassAtom", "NonemptyClassRangesNoDash"]},
    {"name": "NonemptyClassRanges", "symbols": ["ClassAtom", {"literal":"-"}, "ClassAtom", "ClassRanges"]},
    {"name": "NonemptyClassRangesNoDash", "symbols": ["ClassAtom"]},
    {"name": "NonemptyClassRangesNoDash", "symbols": ["ClassAtomNoDash", "NonemptyClassRangesNoDash"]},
    {"name": "NonemptyClassRangesNoDash", "symbols": ["ClassAtomNoDash", {"literal":"-"}, "ClassAtom", "ClassRanges"]},
    {"name": "ClassAtom", "symbols": [{"literal":"-"}]},
    {"name": "ClassAtom", "symbols": ["ClassAtomNoDash"]},
    {"name": "ClassAtomNoDash", "symbols": [/[^\\\]-]/]},
    {"name": "ClassAtomNoDash", "symbols": [{"literal":"\\"}, "ClassEscape"]},
    {"name": "ClassEscape", "symbols": [{"literal":"b"}]},
    {"name": "ClassEscape", "symbols": [{"literal":"-"}]},
    {"name": "ClassEscape", "symbols": ["CharacterClassEscape"]},
    {"name": "ClassEscape", "symbols": ["CharacterEscape"]},
    {"name": "DecimalDigits", "symbols": ["DecimalDigit"]},
    {"name": "DecimalDigits", "symbols": ["DecimalDigits", "DecimalDigit"]},
    {"name": "DecimalDigit", "symbols": [/[0-9]/]},
    {"name": "HexEscapeSequence", "symbols": [{"literal":"x"}, "HexDigit", "HexDigit"]},
    {"name": "Hex4Digits", "symbols": ["HexDigit", "HexDigit", "HexDigit", "HexDigit"]},
    {"name": "HexDigit", "symbols": [/[0-9a-fA-F]/]},
    {"name": "CodePoint", "symbols": ["HexDigits"]},
    {"name": "HexDigits", "symbols": ["HexDigit"]},
    {"name": "HexDigits", "symbols": ["HexDigits", "HexDigit"]},
    {"name": "NonZeroDigit", "symbols": [/[1-9]/]}
];
let ParserStart = "Pattern";
export default { Lexer, ParserRules, ParserStart };
